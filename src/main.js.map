{"version":3,"file":"main.js","sources":["pandoc/pandoc.ts","xml.ts","word/oxml.ts","word/relationships.ts","word/content-types.ts","word/styles.ts","word/numbering.ts","word/resource-types.ts","word/word-document.ts","utils.ts","word-templates/paragraph-template-substitution.ts","word-templates/styled-template-substitution.ts","word-templates/inline-template-substitution.ts","pandoc/pandoc-json.ts","pandoc/pandoc-json-patcher.ts","pandoc/pandoc-json-meta.ts","main.ts"],"sourcesContent":["import {spawn} from \"child_process\";\nimport {PandocJson} from \"src/pandoc/pandoc-json\";\n\nexport function pandoc(src, args): Promise<string> {\n    return new Promise((resolve, reject) => {\n        let stdout = \"\"\n        let stderr = \"\"\n\n        let pandocProcess = spawn('pandoc', args);\n\n        pandocProcess.stdin.end(src, 'utf-8');\n\n        pandocProcess.stdout.on('data', (data) => {\n            stdout += data\n        });\n\n        pandocProcess.stderr.on('data', (data) => {\n            stderr += data\n        });\n\n        pandocProcess.on('exit', function (code) {\n            if (stderr.length) {\n                console.error(\"There was some pandoc warnings along the way:\")\n                console.error(stderr)\n            }\n\n            if (code == 0) {\n                resolve(stdout)\n            } else {\n                reject(new Error(\"Pandoc returned non-zero exit code\"))\n            }\n        });\n    })\n}\n\nexport async function markdownToPandocJson(markdown: string, flags: string[]) {\n    let meta = await pandoc(markdown, [\"-f\", \"markdown\", \"-t\", \"json\", ...flags])\n    return JSON.parse(meta) as PandocJson\n}\n\nexport async function pandocJsonToDocx(pandocJson: PandocJson, flags: string[]) {\n    return await pandoc(JSON.stringify(pandocJson), [\"-f\", \"json\", \"-t\", \"docx\", ...flags])\n}\n\nexport const tokenClasses = [\n    \"KeywordTok\",\n    \"NormalTok\",\n    \"OperatorTok\",\n    \"DataTypeTok\",\n    \"PreprocessorTok\",\n    \"DecValTok\",\n    \"BaseNTok\",\n    \"FloatTok\",\n    \"ConstantTok\",\n    \"CharTok\",\n    \"SpecialCharTok\",\n    \"StringTok\",\n    \"VerbatimStringTok\",\n    \"SpecialStringTok\",\n    \"ImportTok\",\n    \"CommentTok\",\n    \"DocumentationTok\",\n    \"AnnotationTok\",\n    \"CommentVarTok\",\n    \"OtherTok\",\n    \"FunctionTok\",\n    \"VariableTok\",\n    \"ControlFlowTok\",\n    \"BuiltInTok\",\n    \"ExtensionTok\",\n    \"AttributeTok\",\n    \"RegionMarkerTok\",\n    \"InformationTok\",\n    \"WarningTok\",\n    \"AlertTok\",\n    \"ErrorTok\"\n]","import {XMLBuilder, XMLParser} from \"fast-xml-parser\";\n\nexport const keys = {\n    comment: \"__comment__\",\n    text: \"__text__\",\n    attributes: \":@\",\n    document: \"__document__\"\n}\n\nexport const parser = new XMLParser({\n    ignoreAttributes: false,\n    alwaysCreateTextNode: true,\n    attributeNamePrefix: \"\",\n    preserveOrder: true,\n    trimValues: false,\n    commentPropName: keys.comment,\n    textNodeName: keys.text\n})\n\nexport const builder = new XMLBuilder({\n    ignoreAttributes: false,\n    attributeNamePrefix: \"\",\n    preserveOrder: true,\n    commentPropName: keys.comment,\n    textNodeName: keys.text\n})\n\nfunction checkFilter(filter: Filter, node: Node) {\n    if (!filter) return true\n    if (typeof filter === \"string\") {\n        return node.getTagName() === filter\n    }\n    return filter(node)\n}\n\nexport type Filter = string | ((node: Node) => boolean) | null\nexport type VisitCallbackSync<PathType> = (node: Node, path: PathType) => (boolean | void)\nexport type VisitCallbackAsync<PathType> = (node: Node, path: PathType) => Promise<boolean | void>\nexport type VisitCallback<PathType> = VisitCallbackSync<PathType> | VisitCallbackAsync<PathType>\nexport type Path = number[]\n\nfunction getVisitArgs<PathType>(args: any[]) {\n    let filter: Filter = null\n    let callback: VisitCallback<PathType> = args[0]\n    let startPosition: PathType | undefined = args[1]\n\n    if (typeof args[1] === \"function\") {\n        filter = args[0]\n        callback = args[1]\n        startPosition = args[2]\n    }\n\n    return {\n        filter: filter,\n        callback: callback,\n        startPosition: startPosition\n    }\n}\n\nexport class Node {\n    private element: any\n    private tempDestroyed: boolean = false\n\n    constructor(element: any) {\n        if (Array.isArray(element)) {\n            throw new Error(\"XML.Node must be constructed from the xml object, not its children list\")\n        }\n        this.element = element\n    }\n\n    getTagName() {\n        this.checkTemporary()\n        for (let key of Object.getOwnPropertyNames(this.element)) {\n            // Be safe from prototype pollution\n            if (key === \"__proto__\" || key === keys.attributes) continue\n            return key\n        }\n        return null\n    }\n\n    pushChild(child: Node) {\n        this.checkTemporary()\n\n        let children = this.getRawChildren()\n        if (children === null) {\n            throw new Error(\"Cannot call pushChild on \" + this.getTagName() + \" element\")\n        }\n\n        children.push(child.raw())\n    }\n\n    unshiftChild(child: Node) {\n        this.checkTemporary()\n\n        let children = this.getRawChildren()\n        if (children === null) {\n            throw new Error(\"Cannot call unshiftChild on \" + this.getTagName() + \" element\")\n        }\n\n        children.unshift(child.raw())\n    }\n\n    getChildren(filter: Filter | null = null): Node[] {\n        this.checkTemporary()\n\n        let result = []\n        this.visitChildren(filter, (child) => {\n            result.push(child.shallowCopy())\n        })\n        return result\n    }\n\n    getChild(filter: Filter | null): Node | null\n    getChild(path: Path): Node | null\n    getChild(arg: Filter | Path | null = null): Node | null {\n        this.checkTemporary()\n\n        if (Array.isArray(arg)) {\n            let path = arg as Path\n            if (path.length === 0) {\n                return this\n            }\n\n            let result = new Node(this.element)\n\n            for (let i = 0; i < path.length; i++) {\n                if (!result.element) return null\n                let tagName = result.getTagName()\n                let pathComponent = path[i]\n                let children = result.element[tagName]\n\n                if (pathComponent < 0) {\n                    result.element = children[children.length + pathComponent]\n                } else {\n                    result.element = children[pathComponent]\n                }\n            }\n\n            if (!result.element) return null\n            return result\n        } else {\n            let filter = arg as Filter\n            let result = null\n            this.visitChildren(filter, (child) => {\n                if (result) {\n                    throw new Error(\"Element have multiple children matching the given filter\")\n                }\n                result = child.shallowCopy()\n            })\n            return result\n        }\n    }\n\n    visitChildren(filter: Filter, callback: VisitCallback<number>, startIndex?: number): void\n    visitChildren(callback: VisitCallback<number>, startIndex?: number): void\n    visitChildren(...args: any[]) {\n        this.checkTemporary()\n\n        let {\n            filter,\n            callback,\n            startPosition\n        } = getVisitArgs<number>(args)\n\n        let tagName = this.getTagName()\n        if (!Array.isArray(this.element[tagName])) {\n            return\n        }\n\n        let index = startPosition ?? 0\n\n        let tmpNode = new Node(null)\n        for (let child of this.element[tagName]) {\n            tmpNode.element = child\n            if (checkFilter(filter, tmpNode)) {\n                if (callback(tmpNode, index) === false) {\n                    break\n                }\n            }\n            index++\n        }\n\n        tmpNode.markDestroyed()\n    }\n\n    visitSubtree(filter: Filter, callback: VisitCallback<Path>, startPath?: Path): void\n    visitSubtree(callback: VisitCallback<Path>, startPath?: Path): void\n    visitSubtree(...args: any[]) {\n        this.checkTemporary()\n\n        let {\n            filter,\n            callback,\n            startPosition\n        } = getVisitArgs<Path>(args)\n\n        let tmpNode = new Node(null)\n        let startPath = startPosition ?? []\n        let startDepth = 0\n\n        let path = []\n\n        const walk = (node: Node) => {\n            let tagName = node.getTagName()\n            let children = node.element[tagName]\n\n            if (!Array.isArray(children)) {\n                return\n            }\n\n            let depth = path.length\n            let startIndex = 0\n            if (depth < startDepth && startPath.length) {\n                startIndex = startPath[startPath.length]\n                startDepth = depth\n            }\n\n            for (let index = startIndex; index < children.length; index++) {\n                path.push(index)\n                tmpNode.element = children[index]\n                let filterPass = checkFilter(filter, tmpNode)\n                let goDeeper = true\n\n                if (filterPass) {\n                    goDeeper = callback(tmpNode, path) === true\n                }\n\n                if (goDeeper) {\n                    walk(tmpNode)\n                }\n\n                path.pop()\n            }\n        }\n\n        walk(this)\n\n        tmpNode.markDestroyed()\n    }\n\n    removeChild(path: Path) {\n        if(path.length === 0) {\n            throw new Error(\"Cannot call removeChild with empty path\")\n        }\n\n        let topIndex = path.pop()\n\n        let child = this.getChild(path)\n        let childChildren = child.getRawChildren()\n\n        if (childChildren === null) {\n            throw new Error(\"Cannot call removeChild for \" + child.getTagName() + \" element\")\n        }\n\n        childChildren.splice(topIndex, 1)\n\n        path.push(topIndex)\n    }\n\n    removeChildren(filter: Filter = null) {\n        this.checkTemporary()\n        let children = this.getRawChildren()\n\n        if (children === null) {\n            throw new Error(\"Cannot call removeChildren on \" + this.getTagName() + \" element\")\n        }\n\n        let node = new Node(null)\n\n        for (let i = 0; i < children.length; i++) {\n            node.element = children[i]\n            if (checkFilter(filter, node)) {\n                children.splice(i, 1)\n                i--\n            }\n        }\n\n        node.markDestroyed()\n    }\n\n    isTextNode() {\n        this.checkTemporary()\n\n        return this.getTagName() == keys.text\n    }\n\n    isCommentNode() {\n        this.checkTemporary()\n\n        return this.getTagName() == keys.comment\n    }\n\n    getText(): string {\n        this.checkTemporary()\n\n        if (!this.isTextNode()) {\n            throw new Error(\"getText() is called on \" + this.getTagName() + \" element\")\n        }\n        return String(this.element[keys.text])\n    }\n\n    setText(text: string) {\n        this.checkTemporary()\n\n        if (!this.isTextNode()) {\n            throw new Error(\"setText() is called on \" + this.getTagName() + \" element\")\n        }\n        this.element[keys.text] = text\n    }\n\n    getComment(): string {\n        this.checkTemporary()\n\n        if (!this.isCommentNode()) {\n            throw new Error(\"getComment() is called on \" + this.getTagName() + \" element\")\n        }\n\n        let textChild = this.getChild(keys.text)\n        return textChild.getText()\n    }\n\n    static build(tagName: string) {\n        let element = {}\n        element[tagName] = []\n        return new Node(element)\n    }\n\n    static createDocument(args: { [key: string]: string } = {}) {\n        args = Object.assign({\n            version: \"1.0\",\n            encoding: \"UTF-8\",\n            standalone: \"yes\"\n        }, args)\n        let document = this.build(keys.document)\n        document.appendChildren([\n            Node.build(\"?xml\")\n                .setAttrs(args)\n                .appendChildren([\n                    Node.buildTextNode(\"\")\n                ])\n        ])\n        return document\n    }\n\n    static buildTextNode(text: string) {\n        let element = {}\n        element[keys.text] = text\n        return new Node(element)\n    }\n\n    setAttr(attribute: string, value: string) {\n        this.checkTemporary()\n\n        if (!this.element[keys.attributes]) {\n            this.element[keys.attributes] = {}\n        }\n\n        this.element[keys.attributes][attribute] = value\n        return this\n    }\n\n    setAttrs(attributes: { [key: string]: string }) {\n        this.checkTemporary()\n\n        this.element[keys.attributes] = attributes\n        return this\n    }\n\n    getAttrs() {\n        if (!this.element[keys.attributes]) {\n            this.element[keys.attributes] = {}\n        }\n        return this.element[keys.attributes]\n    }\n\n    getAttr(attribute: string): string | null {\n        this.checkTemporary()\n\n        let attrs = this.getAttrs()\n        let attr = attrs[attribute]\n        if(attr === undefined) return null\n        return String(attr)\n    }\n\n    clearChildren(path: Path = []) {\n        this.checkTemporary()\n\n        let parent = this.getChild(path)\n        parent.element[parent.getTagName()] = []\n        return this\n    }\n\n    insertChildren(children: Node[], path: Path) {\n        this.checkTemporary()\n\n        if(path.length === 0) {\n            throw new Error(\"Cannot call insertChildren with empty path\")\n        }\n\n        let insertIndex = path.pop()\n        let parent = this.getChild(path)\n        path.push(insertIndex)\n\n        let lastChildren = parent.getRawChildren()\n\n        if(lastChildren === null) {\n            throw new Error(\"Cannot call insertChildren for \" + parent.getTagName() + \" element\")\n        }\n\n        if (insertIndex < 0) {\n            insertIndex = children.length + insertIndex + 1\n        }\n\n        lastChildren.splice(insertIndex, 0, ...children.map(child => child.raw()))\n        return this\n    }\n\n    appendChildren(children: Node[], path: Path = []) {\n        path.push(-1)\n        this.insertChildren(children, path)\n        path.pop()\n        return this\n    }\n\n    unshiftChildren(children: Node[], path: Path = []) {\n        path.push(0)\n        this.insertChildren(children, path)\n        path.pop()\n        return this\n    }\n\n    assign(another: Node) {\n        this.checkTemporary()\n\n        if (this === another) {\n            return\n        }\n\n        if (this.element) {\n            this.element[this.getTagName()] = undefined\n        } else {\n            this.element = {}\n        }\n\n        this.element[another.getTagName()] = JSON.parse(JSON.stringify(another.raw()[another.getTagName()]))\n\n        if (another.raw()[keys.attributes]) {\n            this.element[keys.attributes] = JSON.parse(JSON.stringify(another.raw()[keys.attributes]))\n        } else {\n            this.element[keys.attributes] = {}\n        }\n\n        return this\n    }\n\n    static fromXmlString(str: string) {\n        let object = parser.parse(str)\n        let wrapped = {}\n        wrapped[keys.document] = object\n        return new Node(wrapped)\n    }\n\n    toXmlString() {\n        this.checkTemporary()\n        if (this.getTagName() === keys.document) {\n            return builder.build(this.element[keys.document])\n        } else {\n            return builder.build([this.element])\n        }\n    }\n\n    raw() {\n        this.checkTemporary()\n        return this.element\n    }\n\n    private checkTemporary() {\n        if (this.tempDestroyed) {\n            throw new Error(\"Method access to an outdated temporary Node. Make sure to call .shallowCopy() on temporary \" +\n                \"nodes before accessing them outside your visitChildren/visitSubtree body scope\")\n        }\n    }\n\n    private markDestroyed() {\n        this.checkTemporary()\n        // From now on, the checkTemporary method will throw\n        this.tempDestroyed = true\n    }\n\n    getRawContents(): any[] | string | number {\n        this.checkTemporary()\n        return this.element[this.getTagName()]\n    }\n\n    getRawChildren(): any[] | null {\n        this.checkTemporary()\n        let contents = this.getRawContents()\n        if(Array.isArray(contents)) {\n            return contents\n        }\n        return null\n    }\n\n    shallowCopy() {\n        this.checkTemporary()\n\n        return new Node(this.element)\n    }\n\n    deepCopy() {\n        this.checkTemporary()\n        return new Node(null).assign(this)\n    }\n\n    isLeaf() {\n        this.checkTemporary()\n        return this.getRawChildren() === null\n    }\n\n    getChildrenCount() {\n        return this.getRawChildren()?.length ?? 0\n    }\n}\n\nexport class Serializable {\n    readXmlString(xmlString: string): this {\n        this.readXml(Node.fromXmlString(xmlString))\n        return this\n    }\n\n    readXml(xml: Node): this {\n        throw new Error(\"readXml is not implemented\")\n        return this\n    }\n\n    toXmlString() {\n        return this.toXml().toXmlString()\n    }\n\n    toXml(): Node {\n        throw new Error(\"toXml is not implemented\")\n    }\n}\n\nexport class Wrapper extends Serializable {\n    node: Node | null = null\n\n    readXml(xml: Node): this {\n        this.node = xml\n        return this\n    }\n\n    toXml() {\n        return this.node\n    }\n}\n\nexport function getNamespace(name: string) {\n    let parts = name.split(\":\")\n    if(parts.length >= 2) {\n        return parts[0]\n    }\n    return null\n}\n\nexport function* getUsedNames(tag: Node) {\n    let tagName = tag.getTagName()\n    yield tagName\n\n    let attributes = tag.getAttrs()\n\n    for(let key of Object.getOwnPropertyNames(attributes)) {\n        // Be safe from prototype pollution\n        if(key === \"__proto__\") continue\n        yield key\n    }\n}\n\nexport function getTextContents(tag: Node): string {\n    let result = \"\"\n\n    tag.visitSubtree(keys.text, (node) => {\n        result += node.getText()\n    })\n\n    return result\n}","import path from \"path\";\nimport * as XML from \"src/xml\";\n\nexport const wordXmlns = new Map<string, string>([\n    [\"wpc\", \"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas\"],\n    [\"mc\", \"http://schemas.openxmlformats.org/markup-compatibility/2006\"],\n    [\"o\", \"urn:schemas-microsoft-com:office:office\"],\n    [\"r\", \"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"],\n    [\"m\", \"http://schemas.openxmlformats.org/officeDocument/2006/math\"],\n    [\"v\", \"urn:schemas-microsoft-com:vml\"],\n    [\"wp14\", \"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing\"],\n    [\"wp\", \"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing\"],\n    [\"w10\", \"urn:schemas-microsoft-com:office:word\"],\n    [\"w\", \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\"],\n    [\"w14\", \"http://schemas.microsoft.com/office/word/2010/wordml\"],\n    [\"w15\", \"http://schemas.microsoft.com/office/word/2012/wordml\"],\n    [\"wpg\", \"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup\"],\n    [\"wpi\", \"http://schemas.microsoft.com/office/word/2010/wordprocessingInk\"],\n    [\"wne\", \"http://schemas.microsoft.com/office/word/2006/wordml\"],\n    [\"wps\", \"http://schemas.microsoft.com/office/word/2010/wordprocessingShape\"],\n    [\"pic\", \"http://schemas.openxmlformats.org/drawingml/2006/picture\"],\n    [\"a\", \"http://schemas.openxmlformats.org/drawingml/2006/main\"],\n])\n\nexport const wordXmlnsIgnorable = new Set<string>([\"wp14\", \"w14\", \"w15\"])\n\nexport function getProperXmlnsForDocument(document: XML.Node) {\n    let result = {}\n    let ignorable = new Set<string>()\n\n    document.visitSubtree((child) => {\n        for(let name of XML.getUsedNames(child)) {\n            let namespace = XML.getNamespace(name)\n\n            if (!namespace || !wordXmlns.has(namespace)) {\n                continue\n            }\n\n            result[\"xmlns:\" + namespace] = wordXmlns.get(namespace)\n\n            if (wordXmlnsIgnorable.has(namespace)) {\n                ignorable.add(namespace)\n            }\n        }\n\n        return true\n    })\n\n    if(ignorable.size) {\n        result[\"xmlns:mc\"] = wordXmlns.get(\"mc\")\n        result[\"mc:Ignorable\"] = Array.from(ignorable).join(\" \")\n    }\n\n    return result\n}\n\nexport function buildParagraphWithStyle(style: string): XML.Node {\n    return XML.Node.build(\"w:p\").appendChildren([\n        XML.Node.build(\"w:pPr\").appendChildren([\n            XML.Node.build(\"w:pStyle\").setAttr(\"w:val\", style)\n        ])\n    ])\n}\n\nexport function buildNumPr(ilvl: string, numId: string): XML.Node {\n    // <w:numPr>\n    //    <w:ilvl w:val=\"<ilvl>\"/>\n    //    <w:numId w:val=\"<numId>\"/>\n    // </w:numPr>\n\n    return XML.Node.build(\"w:numPr\").appendChildren([\n        XML.Node.build(\"w:ilvl\").setAttr(\"w:val\", \"0\"),\n        XML.Node.build(\"w:numId\").setAttr(\"w:val\", numId),\n    ])\n}\n\nexport function buildSuperscriptTextStyle(): XML.Node {\n    return XML.Node.build(\"w:vertAlign\").setAttr(\"w:val\", \"superscript\")\n}\n\nexport function buildParagraphTextTag(text: string, styles?: XML.Node[]): XML.Node {\n    let result = XML.Node.build(\"w:r\").appendChildren([\n        XML.Node.build(\"w:t\")\n            .setAttr(\"xml:space\", \"preserve\")\n            .appendChildren([\n                XML.Node.buildTextNode(text)\n            ])\n    ])\n\n    if(styles) {\n        result.unshiftChild(XML.Node.build(\"w:rPr\").appendChildren(styles))\n    }\n\n    return result\n}\n\nexport function getChildVal(node: XML.Node, tag: string) {\n    let child = node.getChild(tag)\n    if(child) return child.getAttr(\"w:val\")\n    return null\n}\n\nexport function setChildVal(node: XML.Node, tag: string, value: string | null) {\n    if(value === null) {\n        node.removeChildren(tag)\n    } else {\n        let basedOnTag = node.getChild(tag)\n        if(basedOnTag) basedOnTag.setAttr(\"w:val\", value)\n        else node.appendChildren([\n            XML.Node.build(tag).setAttr(\"w:val\", value)\n        ])\n    }\n}\n\nexport function fixXmlns(document: XML.Node, rootTag: string) {\n    document.getChild(rootTag).setAttrs(getProperXmlnsForDocument(document))\n}\n\nexport function normalizePath(pathString: string) {\n    pathString = path.posix.normalize(pathString)\n    if(!pathString.startsWith(\"/\")) {\n        pathString = \"/\" + pathString\n    }\n    return pathString\n}\n\nexport function getRelsPath(resourcePath: string) {\n    let basename = path.basename(resourcePath)\n    let dirname = path.dirname(resourcePath)\n\n    return normalizePath(dirname + \"/_rels/\" + basename + \".rels\")\n}","import * as XML from 'src/xml.js'\n\nexport interface Relation {\n    id: string\n    type: string\n    target: string\n}\n\nexport default class Relationships extends XML.Serializable {\n    relations: Map<string, Relation> = new Map()\n\n    readXml(xml: XML.Node) {\n        this.relations = new Map()\n\n        xml.getChild(\"Relationships\")?.visitChildren(\"Relationship\", (child) => {\n            let id = child.getAttr(\"Id\")\n            let type = child.getAttr(\"Type\")\n            let target = child.getAttr(\"Target\")\n\n            if (id !== undefined && type !== undefined && target !== undefined) {\n                this.relations.set(id, {\n                    id: id,\n                    type: type,\n                    target: target\n                })\n            }\n        })\n\n        return this\n    }\n\n    toXml() {\n        let relations = Array.from(this.relations.values())\n\n        return XML.Node.createDocument().appendChildren([\n            XML.Node.build(\"Relationships\")\n                .setAttr(\"xmlns\", \"http://schemas.openxmlformats.org/package/2006/relationships\")\n                .appendChildren(relations.map((relation) => {\n                    return XML.Node.build(\"Relationship\")\n                        .setAttr(\"Id\", relation.id)\n                        .setAttr(\"Type\", relation.type)\n                        .setAttr(\"Target\", relation.target)\n                }))\n        ])\n    }\n\n    getUnusedId() {\n        let prefix = \"rId\"\n        let index = 1\n\n        while (this.relations.has(prefix + index)) {\n            index++\n        }\n\n        return prefix + index\n    }\n\n    getRelForTarget(target: string) {\n        for(let rel of this.relations.values()) {\n            if(rel.target === target) {\n                return rel\n            }\n        }\n    }\n}","import * as XML from 'src/xml.js'\nimport * as OXML from 'src/word/oxml'\nimport path from \"path\";\n\nexport interface ContentTypeDefault {\n    extension: string,\n    contentType: string\n}\n\nexport interface ContentTypeOverride {\n    partName: string\n    contentType: string\n}\n\nexport default class ContentTypes extends XML.Serializable {\n    defaults: ContentTypeDefault[]\n    overrides: ContentTypeOverride[]\n\n    readXml(xml: XML.Node) {\n        this.defaults = []\n        this.overrides = []\n\n        let types = xml.getChild(\"Types\")\n\n        types?.visitChildren(\"Default\", (child) => {\n            let extension = child.getAttr(\"Extension\")\n            let contentType = child.getAttr(\"ContentType\")\n\n            if (extension !== undefined && contentType !== undefined) {\n                this.defaults.push({\n                    extension: extension,\n                    contentType: contentType\n                })\n            }\n        })\n\n        types?.visitChildren(\"Override\", (child) => {\n            let partName = child.getAttr(\"PartName\")\n            let contentType = child.getAttr(\"ContentType\")\n\n            if (partName !== undefined && contentType !== undefined) {\n                this.overrides.push({\n                    partName: partName,\n                    contentType: contentType\n                })\n            }\n        })\n\n        return this\n    }\n\n    toXml() {\n        return XML.Node.createDocument().appendChildren([\n            XML.Node.build(\"Types\")\n                .setAttr(\"xmlns\", \"http://schemas.openxmlformats.org/package/2006/content-types\")\n                .appendChildren(this.defaults.map((def) => {\n                    return XML.Node.build(\"Default\")\n                        .setAttr(\"Extension\", def.extension)\n                        .setAttr(\"ContentType\", def.contentType)\n                }))\n                .appendChildren(this.overrides.map((override) => {\n                    return XML.Node.build(\"Override\")\n                        .setAttr(\"PartName\", override.partName)\n                        .setAttr(\"ContentType\", override.contentType)\n                }))\n        ])\n    }\n\n    getContentTypeForExt(ext: string) {\n        for(let def of this.defaults) {\n            if(def.extension === ext) return def.contentType\n        }\n        return null\n    }\n\n    getOverrideForPartName(partName: string) {\n        for(let override of this.overrides) {\n            if(override.partName === partName) return override.contentType\n        }\n        return null\n    }\n\n    getContentTypeForPath(pathString: string) {\n        pathString = OXML.normalizePath(pathString)\n        let overrideContentType = this.getOverrideForPartName(pathString)\n\n        if(overrideContentType !== null) {\n            return overrideContentType\n        }\n\n        const extension = path.extname(pathString).slice(1)\n        return this.getContentTypeForExt(extension)\n    }\n\n    join(other: ContentTypes) {\n        for(let otherDef of other.defaults) {\n            if(this.getContentTypeForExt(otherDef.extension) === null) {\n                this.defaults.push({\n                    ...otherDef\n                })\n            }\n        }\n\n        for(let otherOverride of other.overrides) {\n            if(this.getOverrideForPartName(otherOverride.partName) === null) {\n                this.overrides.push({\n                    ...otherOverride\n                })\n            }\n        }\n    }\n}","import * as XML from 'src/xml.js'\nimport * as OXML from 'src/word/oxml'\nimport Relationships from \"./relationships\";\n\nexport class Style extends XML.Wrapper {\n    getBaseStyle() {\n        return OXML.getChildVal(this.node, \"w:basedOn\")\n    }\n\n    getLinkedStyle() {\n        return OXML.getChildVal(this.node, \"w:link\")\n    }\n\n    getNextStyle() {\n        return OXML.getChildVal(this.node, \"w:link\")\n    }\n\n    getName() {\n        return OXML.getChildVal(this.node, \"w:name\")\n    }\n\n    getId() {\n        return this.node.getAttr(\"w:styleId\")\n    }\n\n    setBaseStyle(style: string | null) {\n        OXML.setChildVal(this.node, \"w:basedOn\", style)\n    }\n\n    setLinkedStyle(style: string | null) {\n        OXML.setChildVal(this.node, \"w:link\", style)\n    }\n\n    setNextStyle(style: string | null) {\n        OXML.setChildVal(this.node, \"w:next\", style)\n    }\n\n    setName(name: string) {\n        OXML.setChildVal(this.node, \"w:name\", name)\n    }\n\n    setId(id: string) {\n        this.node.setAttr(\"w:styleId\", id)\n    }\n}\n\nexport class LatentStyles extends XML.Wrapper {\n    readOrCreate(node: XML.Node): this {\n        if(!node) {\n            node = XML.Node.build(\"w:latentStyles\")\n        }\n        return this.readXml(node)\n    }\n\n    getLsdExceptions() {\n        let result = new Map()\n        this.node.visitChildren(\"w:lsdException\", (child) => {\n            let lsdException = new LSDException().readXml(child.shallowCopy())\n            result.set(lsdException.name, lsdException)\n        })\n    }\n}\n\nexport class DocDefaults extends XML.Wrapper {\n    readOrCreate(node: XML.Node): this {\n        if(!node) {\n            node = XML.Node.build(\"w:docDefaults\")\n        }\n        return this.readXml(node)\n    }\n}\n\nexport class LSDException extends XML.Wrapper {\n    name: string\n\n    readXml(node: XML.Node) {\n        this.name = node.getAttr(\"w:name\")\n        return this\n    }\n\n    setName(name: string) {\n        this.name = name\n        this.node.setAttr(\"w:name\", name)\n        return this\n    }\n}\n\nexport default class Styles extends XML.Serializable {\n    styles: Map<string, Style> = new Map()\n    docDefaults: DocDefaults | null = null\n    latentStyles: LatentStyles | null = null\n    rels: Relationships\n\n    readXml(xml: XML.Node) {\n        this.styles = new Map()\n\n        let styles = xml.getChild(\"w:styles\")\n\n        this.latentStyles = new LatentStyles().readOrCreate(styles.getChild(\"w:latentStyles\"))\n        this.docDefaults = new DocDefaults().readOrCreate(styles.getChild(\"w:docDefaults\"))\n\n        styles?.visitChildren(\"w:style\", (child) => {\n            let style = new Style().readXml(child.shallowCopy())\n\n            this.styles.set(style.getId(), style)\n        })\n\n        return this\n    }\n\n    toXml() {\n        let styles = Array.from(this.styles.values())\n\n        let result = XML.Node.createDocument().appendChildren([\n            XML.Node.build(\"w:styles\")\n                .appendChildren([\n                    this.docDefaults.node.deepCopy(),\n                    this.latentStyles.node.deepCopy()\n                ])\n                .appendChildren(styles.map((style) => {\n                    return style.node.deepCopy()\n                }))\n        ])\n\n        result.getChild(\"w:styles\").setAttrs(OXML.getProperXmlnsForDocument(result))\n\n        return result\n    }\n\n    removeStyle(style: Style) {\n        this.styles.delete(style.getId())\n    }\n\n    addStyle(style: Style) {\n        this.styles.set(style.getId(), style)\n    }\n\n    getStyleByName(name: string) {\n        for(let [id, style] of this.styles) {\n            if(style.getName() === name) return style\n        }\n        return null\n    }\n}","import * as XML from \"src/xml\";\nimport * as OXML from \"src/word/oxml\";\n\nfunction getNodeLevel(node: XML.Node, tagName: string, index: number) {\n    let result: XML.Node | null\n\n    let strIndex = String(index)\n\n    node.visitChildren(tagName, (child) => {\n        if(child.getAttr(\"w:ilvl\") === strIndex) {\n            result = child.shallowCopy()\n            return false\n        }\n    })\n\n    if(!result) {\n        result = XML.Node.build(tagName).setAttr(\"w:ilvl\", strIndex)\n        node.appendChildren([result])\n    }\n\n    return result\n}\n\nexport class AbstractNum extends XML.Wrapper {\n    getId() {\n        return this.node.getAttr(\"w:abstractNumId\")\n    }\n\n    getLevel(index: number) {\n        return getNodeLevel(this.node, \"w:lvl\", index)\n    }\n}\n\nexport class Num extends XML.Wrapper {\n    getId() {\n        return this.node.getAttr(\"w:numId\")\n    }\n\n    getAbstractNumId() {\n        return OXML.getChildVal(this.node, \"w:abstractNumId\")\n    }\n\n    getLevelOverride(index: number) {\n        return getNodeLevel(this.node, \"w:lvlOverride\", index)\n    }\n\n    setId(id: string) {\n        this.node.setAttr(\"w:numId\", id)\n    }\n\n    setAbstractNumId(id: string) {\n        OXML.setChildVal(this.node, \"w:abstractNumId\", id)\n    }\n}\n\nexport default class Numbering extends XML.Serializable {\n    abstractNums: Map<string, AbstractNum> = new Map()\n    nums: Map<string, Num> = new Map()\n\n    readXml(xml: XML.Node) {\n\n        let styles = xml.getChild(\"w:numbering\")\n\n        styles?.visitChildren(\"w:abstractNum\", (child) => {\n            let abstractNum = new AbstractNum().readXml(child.shallowCopy())\n            this.abstractNums.set(abstractNum.getId(), abstractNum)\n        })\n\n        styles?.visitChildren(\"w:num\", (child) => {\n            let num = new Num().readXml(child.shallowCopy())\n            this.nums.set(num.getId(), num)\n        })\n\n        return this\n    }\n\n    toXml() {\n        let abstractNums = Array.from(this.abstractNums.values())\n        let nums = Array.from(this.nums.values())\n\n        return XML.Node.createDocument().appendChildren([\n            XML.Node.build(\"w:numbering\")\n                .appendChildren(abstractNums.map((style) => {\n                    return style.node.deepCopy()\n                }))\n                .appendChildren(nums.map((style) => {\n                    return style.node.deepCopy()\n                }))\n        ])\n    }\n\n    getUnusedNumId() {\n        let index = 1\n        while(this.nums.has(String(index))) {\n            index++\n        }\n        return String(index)\n    }\n}","\nexport interface WordResourceType {\n    mimeType: string\n    xmlnsTag?: string\n}\n\nexport function getResourceTypeForMimeType(mimeType: string) {\n    for(let key of Object.getOwnPropertyNames(resourceTypes)) {\n        if(key === \"__proto__\") continue\n        if(resourceTypes[key].mimeType === mimeType) {\n            return key\n        }\n    }\n}\n\nexport const resourceTypes: {\n    [key: string]: WordResourceType\n} = {\n    app: {\n        mimeType: \"application/vnd.openxmlformats-officedocument.extended-properties+xml\",\n        xmlnsTag: \"Properties\"\n    },\n    core: {\n        mimeType: \"application/vnd.openxmlformats-package.core-properties+xml\",\n        xmlnsTag: \"cp:coreProperties\"\n    },\n    custom: {\n        mimeType: \"application/vnd.openxmlformats-officedocument.custom-properties+xml\",\n        xmlnsTag: \"Properties\"\n    },\n    document: {\n        mimeType: \"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml\",\n        xmlnsTag: \"w:document\"\n    },\n    relationships: {\n        mimeType: \"application/vnd.openxmlformats-package.relationships+xml\",\n        xmlnsTag: \"Relationships\"\n    },\n    webSettings: {\n        mimeType: \"application/vnd.openxmlformats-officedocument.wordprocessingml.webSettings+xml\",\n        xmlnsTag: \"webSettings\"\n    },\n    numbering: {\n        mimeType: \"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml\",\n        xmlnsTag: \"w:numbering\"\n    },\n    settings: {\n        mimeType: \"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml\",\n        xmlnsTag: \"w:settings\"\n    },\n    styles: {\n        mimeType: \"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml\",\n        xmlnsTag: \"w:styles\"\n    },\n    fontTable: {\n        mimeType: \"application/vnd.openxmlformats-officedocument.wordprocessingml.fontTable+xml\",\n        xmlnsTag: \"w:fonts\"\n    },\n    theme: {\n        mimeType: \"application/vnd.openxmlformats-officedocument.theme+xml\",\n        xmlnsTag: \"a:theme\"\n    },\n    comments: {\n        mimeType: \"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml\",\n        xmlnsTag: \"w:comments\"\n    },\n    footnotes: {\n        mimeType: \"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml\",\n        xmlnsTag: \"w:footnotes\"\n    },\n    footer: {\n        mimeType: \"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml\",\n        xmlnsTag: \"w:ftr\"\n    },\n    header: {\n        mimeType: \"application/vnd.openxmlformats-officedocument.wordprocessingml.header+xml\",\n        xmlnsTag: \"w:hdr\"\n    },\n    png: {\n        mimeType: \"image/png\"\n    },\n}","import JSZip from \"jszip\";\nimport * as XML from \"src/xml\"\nimport * as OXML from \"src/word/oxml\"\nimport fs from \"fs\";\nimport Relationships from \"src/word/relationships\";\nimport ContentTypes from \"src/word/content-types\";\nimport Styles from \"src/word/styles\";\nimport Numbering from \"src/word/numbering\";\nimport {getResourceTypeForMimeType, resourceTypes, WordResourceType} from \"./resource-types\";\n\nexport const contentTypesPath = \"/[Content_Types].xml\"\nexport const globalRelsPath = \"/_rels/.rels\"\n\nexport class WordResource<T extends XML.Serializable> {\n    document: WordDocument\n    path: string\n    resource: T\n    rels?: Relationships = null\n\n    constructor(document: WordDocument, path: string, resource: T) {\n        this.document = document\n        this.path = path\n        this.resource = resource\n    }\n\n    saveRels() {\n        if(!this.rels) return\n        let relsXml = this.rels.toXml()\n        this.document.saveXml(OXML.getRelsPath(this.path), relsXml)\n    }\n\n    save() {\n        let xml = this.resource.toXml()\n        let contentType = this.document.contentTypes.resource.getContentTypeForPath(this.path)\n\n        if(contentType) {\n            let resourceType = getResourceTypeForMimeType(contentType)\n            if (resourceType) {\n                OXML.fixXmlns(xml, resourceTypes[resourceType].xmlnsTag)\n            }\n        }\n\n        this.document.saveXml(this.path, xml)\n        this.saveRels()\n    }\n\n    setRels(rels: Relationships): this {\n        this.rels = rels\n        return this\n    }\n}\n\nexport type WordXMLFactory<T extends XML.Serializable> = (document: WordDocument, path: string, xml: XML.Node, rels: Relationships) => WordResource<T>\n\nexport const ResourceFactories = {\n    generic: (document, path, xml) => {\n        return new WordResource(document, path, new XML.Wrapper().readXml(xml))\n    },\n    genericWithRel: (document, path, xml, rel) => {\n        return new WordResource(document, path, new XML.Wrapper().readXml(xml)).setRels(rel)\n    },\n    styles: (document, path, xml) => {\n        return new WordResource(document, path, new Styles().readXml(xml))\n    },\n    numbering: (document, path, xml) => {\n        return new WordResource(document, path, new Numbering().readXml(xml))\n    },\n    relationships: (document, path, xml) => {\n        return new WordResource(document, path, new Relationships().readXml(xml))\n    },\n    contentTypes: (document, path, xml) => {\n        return new WordResource(document, path, new ContentTypes().readXml(xml))\n    },\n}\n\nexport default class WordDocument {\n\n    zipContents: JSZip\n    wrappers: Map<string, WordResource<XML.Serializable>> = new Map()\n\n    contentTypes: WordResource<ContentTypes>\n    globalRels: WordResource<Relationships>\n    numbering: WordResource<Numbering>\n    styles: WordResource<Styles>\n\n    document: WordResource<XML.Serializable>\n    settings: WordResource<XML.Serializable>\n    fontTable: WordResource<XML.Serializable>\n    comments: WordResource<XML.Serializable>\n\n    headers: WordResource<XML.Serializable>[] = []\n    footers: WordResource<XML.Serializable>[] = []\n\n    async load(path: string) {\n        const contents = await fs.promises.readFile(path)\n        this.zipContents = await JSZip.loadAsync(contents)\n\n        this.contentTypes = await this.createResourceForPath(ResourceFactories.contentTypes, contentTypesPath)\n        this.globalRels = await this.createResourceForPath(ResourceFactories.relationships, globalRelsPath)\n        this.document = await this.createResourceForType(ResourceFactories.genericWithRel, resourceTypes.document)\n        this.styles = await this.createResourceForType(ResourceFactories.styles, resourceTypes.styles)\n        this.settings = await this.createResourceForType(ResourceFactories.generic, resourceTypes.settings)\n        this.numbering = await this.createResourceForType(ResourceFactories.numbering, resourceTypes.numbering)\n        this.fontTable = await this.createResourceForType(ResourceFactories.generic, resourceTypes.fontTable)\n        this.comments = await this.createResourceForType(ResourceFactories.generic, resourceTypes.comments)\n\n        this.headers = await this.createResourcesForType(ResourceFactories.generic, resourceTypes.header)\n        this.footers = await this.createResourcesForType(ResourceFactories.generic, resourceTypes.footer)\n\n        return this\n    }\n\n    getSinglePathForMimeType(type: string) {\n        let paths = this.getPathsForMimeType(type)\n        if(paths.length !== 1) return null\n        return paths[0]\n    }\n\n    async createResourceForType<T extends XML.Serializable>(factory: WordXMLFactory<T>, type: WordResourceType): Promise<WordResource<T>> {\n        let path = this.getSinglePathForMimeType(type.mimeType)\n        if(!path) return null\n        return await this.createResourceForPath(factory, path)\n    }\n\n    async createResourcesForType<T extends XML.Serializable>(factory: WordXMLFactory<T>, type: WordResourceType): Promise<WordResource<T>[]> {\n        let paths = this.getPathsForMimeType(type.mimeType)\n\n        return await Promise.all(paths.map(path => this.createResourceForPath(factory, path)))\n    }\n\n    async createResourceForPath<T extends XML.Serializable>(factory: WordXMLFactory<T>, pathString: string): Promise<WordResource<T>> {\n        pathString = OXML.normalizePath(pathString)\n\n        if(this.wrappers.has(pathString)) {\n            throw new Error(\"This resource have already been created\")\n        }\n\n        let relsPath = OXML.getRelsPath(pathString)\n        let relationships: Relationships | null = null\n\n        let relationshipsXml = await this.getXml(relsPath)\n        if(relationshipsXml) {\n            relationships = new Relationships().readXml(relationshipsXml)\n        }\n\n        let resource = factory(this, pathString, await this.getXml(pathString), relationships)\n\n        this.wrappers.set(pathString, resource)\n\n        return resource\n    }\n\n    getPathsForMimeType(type: string) {\n        let result = []\n        this.zipContents.forEach((path) => {\n            let mimeType = this.contentTypes.resource.getContentTypeForPath(path)\n            if(mimeType === type) {\n                result.push(path)\n            }\n        })\n        return result\n    }\n\n    hasFile(path: string) {\n        return this.zipContents.file(path) !== null\n    }\n\n    async getFile(path: string) {\n        return await this.zipContents.file(path.slice(1)).async(\"arraybuffer\")\n    }\n\n    async getXml(path: string) {\n        let contents = this.zipContents.file(path.slice(1))\n        if(!contents) return null\n        return XML.Node.fromXmlString(await contents.async(\"string\"))\n    }\n\n    saveFile(path: string, data: ArrayBuffer) {\n        this.zipContents.file(path.slice(1), data)\n    }\n\n    saveXml(path: string, xml: XML.Node) {\n        this.zipContents.file(path.slice(1), xml.toXmlString())\n    }\n\n    async save(path: string) {\n        for(let [path, resource] of this.wrappers) {\n            resource.save()\n        }\n\n        const contents = await this.zipContents.generateAsync({type: \"uint8array\"})\n        await fs.writeFileSync(path, contents);\n    }\n}\n","\nexport function *uniqueNameGenerator(name: string) {\n    let index = 0\n    while (true) {\n        let nameCandidate = name\n        if (index > 0) nameCandidate += \"_\" + index\n        yield nameCandidate\n        index++;\n    }\n}","import WordDocument from \"src/word/word-document\";\nimport * as XML from \"src/xml\";\n\nexport default class ParagraphTemplateSubstitution {\n    private document: WordDocument;\n    private template: string;\n    private replacement: () => XML.Node[];\n\n    setDocument(document: WordDocument) {\n        this.document = document\n        return this\n    }\n\n    setTemplate(template: string) {\n        this.template = template\n        return this\n    }\n\n    setReplacement(replacement: () => XML.Node[]) {\n        this.replacement = replacement\n        return this\n    }\n\n    perform() {\n        const body = this.document.document.resource.toXml().getChild(\"w:document\").getChild(\"w:body\")\n        this.replaceParagraphsWithTemplate(body)\n        return this\n    }\n\n    private replaceParagraphsWithTemplate(body: XML.Node) {\n        for(let i = 0; i < body.getChildrenCount(); i++) {\n            let child = body.getChild([i])\n\n            let paragraphText = \"\"\n            child.visitSubtree(\"w:t\", (textNode) => {\n                paragraphText += XML.getTextContents(textNode)\n            })\n\n            if(paragraphText.indexOf(this.template) === -1) {\n                continue\n            }\n\n            if(paragraphText !== this.template) {\n                throw new Error(`The ${this.template} pattern should be the only text of the paragraph`)\n            }\n\n            body.removeChild([i])\n            let replacement = this.replacement()\n            body.insertChildren(replacement, [i])\n            i += replacement.length - 1\n        }\n    }\n}","import * as XML from \"src/xml\"\nimport * as OXML from \"src/word/oxml\";\nimport path from \"path\"\nimport WordDocument from \"src/word/word-document\";\nimport Relationships, {Relation} from \"src/word/relationships\";\nimport {Style} from \"src/word/styles\";\nimport {Num} from \"src/word/numbering\";\nimport {uniqueNameGenerator} from \"src/utils\";\nimport ParagraphTemplateSubstitution from \"src/word-templates/paragraph-template-substitution\";\n\nexport interface ListConversion {\n    styleName: string,\n    numId: string\n}\n\nexport interface ListsConversion {\n    bullet?: ListConversion\n    decimal?: ListConversion\n}\n\nconst styleTags = [\"w:pStyle\", \"w:rStyle\", \"w:tblStyle\"]\n\nexport class StyledTemplateSubstitution {\n    // MARK: Options\n    private styleConversion: Map<string, string> = new Map()\n    private stylesToMigrate: Set<string> = new Set()\n    private listsConversion: ListsConversion = {}\n    private source?: WordDocument\n    private target?: WordDocument\n    private template?: string\n    private allowUnrecognizedStyles: boolean = false\n\n    // MARK: Internal fields\n    private styleIdConversion: Map<string, string> = new Map<string, string>()\n    private styleIdsToMigrate: Set<string> = new Set()\n\n    private transferredRels: Map<string, string> = new Map()\n    private transferredStyles: Map<string, string> = new Map()\n    private transferredResources: Map<string, string> = new Map()\n    private transferredNumbering: Map<string, ListConversion> = new Map()\n\n    setStyleConversion(conversion: Map<string, string>) {\n        this.styleConversion = conversion\n        return this\n    }\n\n    setStylesToMigrate(styles: Set<string>) {\n        this.stylesToMigrate = styles\n        return this\n    }\n\n    setListConversion(conversion: ListsConversion) {\n        this.listsConversion = conversion\n        return this\n    }\n\n    setSource(document: WordDocument) {\n        this.source = document\n        return this\n    }\n\n    setTarget(document: WordDocument) {\n        this.target = document\n        return this\n    }\n\n    setTemplate(template: string) {\n        this.template = template\n        return this\n    }\n\n    setAllowUnrecognizedStyles(allowUnrecognizedStyles: boolean) {\n        this.allowUnrecognizedStyles = allowUnrecognizedStyles\n        return this\n    }\n\n    async perform() {\n        this.transferredRels.clear()\n        this.transferredStyles.clear()\n        this.updateStyleIds()\n\n        let sourceBody = this.source.document.resource.toXml().getChild(\"w:document\").getChild(\"w:body\")\n\n        let transferredBody = XML.Node.build(sourceBody.getTagName())\n        this.copySubtree(sourceBody, transferredBody)\n\n        let promises = []\n\n        for (let [from, to] of this.transferredResources) {\n            promises.push(this.transferResource(from, to))\n        }\n\n        await Promise.all(promises)\n\n        new ParagraphTemplateSubstitution()\n            .setDocument(this.target)\n            .setTemplate(this.template)\n            .setReplacement(() => transferredBody.getChildren())\n            .perform()\n\n        return this\n    }\n\n    private copySubtree(from: XML.Node, to: XML.Node) {\n        from.visitChildren((child, index) => {\n            if (child.isLeaf()) {\n                let copy = child.deepCopy()\n                to.insertChildren([copy], [index])\n                return false\n            }\n\n            let tagName = child.getTagName()\n            let attributes = child.getAttrs()\n\n            let childCopy = XML.Node.build(tagName).setAttrs(attributes)\n            to.insertChildren([childCopy], [index])\n\n            this.copySubtree(child, childCopy)\n            this.handleCopy(childCopy)\n\n            return true\n        })\n    }\n\n    private async transferResource(from: string, to: string) {\n        this.target.saveFile(to, await this.source.getFile(from))\n    }\n\n    private updateStyleIds() {\n        this.styleIdConversion.clear()\n\n        for (let [sourceStyleName, targetStyleName] of this.styleConversion) {\n            let sourceStyle = this.source.styles.resource.getStyleByName(sourceStyleName)\n            let targetStyle = this.target.styles.resource.getStyleByName(targetStyleName)\n\n            if (!sourceStyle) {\n                throw new Error(\"Could not find style named '\" + sourceStyleName + \"' in source document\")\n            }\n\n            if (!targetStyle) {\n                throw new Error(\"Could not find style named '\" + targetStyleName + \"' in target document\")\n            }\n\n            this.styleIdConversion.set(sourceStyle.getId(), targetStyle.getId())\n        }\n\n        this.styleIdsToMigrate.clear()\n\n        for (let styleName of this.stylesToMigrate) {\n            let style = this.source.styles.resource.getStyleByName(styleName)\n            this.styleIdsToMigrate.add(style.getId())\n        }\n\n        return this\n    }\n\n    private maybeCopyResource(pathString: string) {\n        if (!this.transferredResources.has(pathString)) {\n            // Choose unique path for the new resource\n            let extname = path.extname(pathString)\n            let basename = path.basename(pathString, extname)\n            let dirname = path.dirname(pathString)\n\n            for (let candidate of uniqueNameGenerator(dirname + \"/\" + basename)) {\n                candidate += extname\n                if (!this.target.hasFile(candidate)) {\n                    this.transferredResources.set(pathString, candidate)\n                    break\n                }\n            }\n        }\n\n        return this.transferredResources.get(pathString)\n    }\n\n    private transferRelation(relId: string) {\n        if (!this.source.document.rels) {\n            throw new Error(\"Relation attribute is used in a resource without relationships xml\")\n        }\n\n        if (!this.target.document.rels) {\n            this.target.document.setRels(new Relationships())\n        }\n\n        let relation = this.source.document.rels.relations.get(relId)\n\n        let existingRelation = this.target.document.rels.getRelForTarget(relation.target)\n\n        if (existingRelation) {\n            return existingRelation.id\n        }\n\n        let dirname = path.dirname(this.source.document.path)\n        let relationPath = OXML.normalizePath(dirname + \"/\" + relation.target)\n        let resourcePath = this.maybeCopyResource(relationPath)\n\n        let newRelation: Relation = {\n            type: relation.type,\n            target: path.relative(dirname, resourcePath),\n            id: this.target.document.rels.getUnusedId()\n        }\n\n        this.target.document.rels.relations.set(newRelation.id, newRelation)\n        this.transferredRels.set(relId, newRelation.id)\n    }\n\n    private handleStyleNode(node: XML.Node) {\n        if (styleTags.indexOf(node.getTagName()) === -1) return\n\n        let style = node.getAttr(\"w:val\")\n        let converted = this.getConvertedStyleId(style)\n        if (converted !== null) node.setAttr(\"w:val\", converted)\n    }\n\n    private getTransferredNumberingFor(numPr: XML.Node) {\n        let numId = numPr.getChild(\"w:numId\").getAttr(\"w:val\")\n        let transferredNumbering = this.transferredNumbering.get(numId)\n\n        if(transferredNumbering) {\n            return transferredNumbering\n        }\n\n        let docNumbering = this.source.numbering.resource\n        let numbering = docNumbering.nums.get(numId)\n        let abstractNum = docNumbering.abstractNums.get(numbering.getAbstractNumId())\n\n        let format = abstractNum.getLevel(0)\n            .getChild(\"w:numFmt\")\n            ?.getAttr(\"w:val\")\n        let intendedNumbering: ListConversion\n\n        if (format === \"decimal\") {\n            intendedNumbering = this.listsConversion.decimal\n        } else if (format === \"bullet\") {\n            intendedNumbering = this.listsConversion.bullet\n        } else {\n            throw new Error(\"Could not convert numbering with format \" + format)\n        }\n\n        transferredNumbering = {\n            styleName: this.target.styles.resource.getStyleByName(intendedNumbering.styleName).getId(),\n            numId: this.createNumbering(intendedNumbering.numId)\n        }\n\n        this.transferredNumbering.set(numId, transferredNumbering)\n        return transferredNumbering\n    }\n\n    private handleParagraphNumbering(node: XML.Node) {\n        if (node.getTagName() !== \"w:pPr\") return\n\n        let numPr = node.getChild(\"w:numPr\")\n        if (!numPr) return\n\n        let transferredNumbering = this.getTransferredNumberingFor(numPr)\n\n        numPr.getChild(\"w:numId\").setAttr(\"w:val\", transferredNumbering.numId)\n\n        node.removeChildren(\"w:pStyle\")\n        node.pushChild(\n            XML.Node.build(\"w:pStyle\")\n                .setAttr(\"w:val\", transferredNumbering.styleName)\n        )\n\n    }\n\n    private createNumbering(abstractId: string) {\n        let newNumId = this.target.numbering.resource.getUnusedNumId()\n        let newNumbering = new Num().readXml(XML.Node.build(\"w:num\"))\n        newNumbering.setAbstractNumId(abstractId)\n        newNumbering.setId(newNumId)\n\n        for (let i = 0; i < 8; i++) {\n            newNumbering.getLevelOverride(i).appendChildren([\n                XML.Node.build(\"w:startOverride\")\n                    .setAttr(\"w:val\", \"1\")\n            ])\n        }\n\n        this.target.numbering.resource.nums.set(newNumId, newNumbering)\n        return newNumId\n    }\n\n\n    private getConvertedStyleId(styleId: string) {\n        let conversion = this.styleIdConversion.get(styleId)\n\n        if (conversion === undefined && this.styleIdsToMigrate.has(styleId)) {\n            conversion = this.migrateSourceStyle(styleId)\n        }\n\n        if (conversion !== undefined) {\n            return conversion\n        }\n\n        if (this.allowUnrecognizedStyles) {\n            return null\n        }\n\n        // Some editors can break when the used style was not\n        // defined. As an example, LibreOffice failed to render\n        // the table properly because its paragraphs were using\n        // a non-existent style.\n        // To prevent this, the default behaviour is to throw\n        // an error when unrecognized class is detected.\n\n        this.reportUnrecognizedSourceStyle(styleId)\n    }\n\n    private handleRelNode(node: XML.Node) {\n        for (let attr of [\"r:id\", \"r:embed\"]) {\n            let relId = node.getAttr(attr);\n            if (!relId) continue\n\n            if (!this.transferredRels.has(relId)) {\n                this.transferRelation(relId)\n            }\n\n            node.setAttr(attr, this.transferredRels.get(relId));\n        }\n    }\n\n    private handleCopy(node: XML.Node) {\n        this.handleStyleNode(node)\n        this.handleParagraphNumbering(node)\n        this.handleRelNode(node)\n    }\n\n    private getUnusedTargetStyleName(baseName: string) {\n        for (let name of uniqueNameGenerator(baseName)) {\n            if (!this.target.styles.resource.getStyleByName(name)) return name\n        }\n    }\n\n    private getUnusedTargetStyleId(baseName: string) {\n        for (let name of uniqueNameGenerator(\"migrated_\" + baseName)) {\n            if (!this.source.styles.resource.styles.has(name)) return name\n        }\n    }\n\n    private migrateSourceStyle(styleId: string) {\n        let style = this.source.styles.resource.styles.get(styleId)\n\n        let copiedStyle = new Style().readXml(style.node.deepCopy())\n        let copiedStyleId = this.getUnusedTargetStyleId(styleId)\n        let copiedStyleName = this.getUnusedTargetStyleName(style.getName())\n\n        this.styleIdConversion.set(styleId, copiedStyleId)\n\n        copiedStyle.setId(copiedStyleId)\n        copiedStyle.setName(copiedStyleName)\n\n        let nextStyle = copiedStyle.getNextStyle()\n        let baseStyle = copiedStyle.getBaseStyle()\n        let linkedStyle = copiedStyle.getLinkedStyle()\n\n        if (nextStyle !== null) {\n            let converted = this.getConvertedStyleId(nextStyle)\n            if (converted !== null) copiedStyle.setNextStyle(converted)\n        }\n\n        if (baseStyle !== null) {\n            let converted = this.getConvertedStyleId(baseStyle)\n            if (converted !== null) copiedStyle.setBaseStyle(converted)\n        }\n\n        if (linkedStyle !== null) {\n            let converted = this.getConvertedStyleId(linkedStyle)\n            if (converted !== null) copiedStyle.setLinkedStyle(converted)\n        }\n\n        this.target.styles.resource.addStyle(copiedStyle)\n\n        return copiedStyleId\n    }\n\n    private reportUnrecognizedSourceStyle(styleId: string) {\n        let style = this.source.styles.resource.styles.get(styleId)\n        throw new Error(\"The source document contains style \" + style.getName() + \" which is not handled \" +\n            \"by the style conversion ruleset. Provide the substitution for this style, mark it to be \" +\n            \"migrated or use setAllowUnrecognizedStyle(true).\")\n    }\n}","import WordDocument from \"src/word/word-document\";\nimport * as XML from \"src/xml\";\n\nexport default class InlineTemplateSubstitution {\n    private document: WordDocument;\n    private template: string;\n    private replacement: string;\n\n    setDocument(document: WordDocument) {\n        this.document = document\n        return this\n    }\n\n    setTemplate(template: string) {\n        this.template = template\n        return this\n    }\n\n    setReplacement(replacement: string) {\n        this.replacement = replacement\n        return this\n    }\n\n    private replaceInlineTemplate(body: XML.Node) {\n        for(let i = 0; i < body.getChildrenCount(); i++) {\n            let child = body.getChild([i])\n\n            child.visitSubtree(\"w:t\", (paragraphText) => {\n                paragraphText.visitSubtree(XML.keys.text, (textNode) => {\n                    textNode.setText(textNode.getText().replace(this.template, this.replacement))\n                })\n            })\n        }\n    }\n\n    private removeParagraphsWithTemplate(body: XML.Node) {\n        for(let i = 0; i < body.getChildrenCount(); i++) {\n            let child = body.getChild([i])\n            let found = false\n\n            child.visitSubtree(\"w:t\", (paragraphText) => {\n                paragraphText.visitSubtree(XML.keys.text, (textNode) => {\n                    let text = textNode.getText()\n\n                    if(text.indexOf(this.template) !== null) {\n                        found = true\n                    }\n                })\n\n                return !found\n            })\n\n            if(found) {\n                body.removeChild([i])\n                i--\n            }\n        }\n    }\n\n    performIn(body: XML.Node) {\n        if (this.replacement === \"@none\") {\n            this.removeParagraphsWithTemplate(body)\n        } else {\n            this.replaceInlineTemplate(body)\n        }\n    }\n\n    perform() {\n        let document = this.document\n\n        let documentBody = document.document.resource.toXml().getChild(\"w:document\").getChild(\"w:body\")\n        this.performIn(documentBody)\n\n        for(let header of document.headers) {\n            this.performIn(header.resource.toXml().getChild(\"w:hdr\"))\n        }\n\n        for(let footer of document.footers) {\n            this.performIn(footer.resource.toXml().getChild(\"w:ftr\"))\n        }\n\n        return this\n    }\n}\n","/*\n    This code was taken from https://github.com/mvhenderson/pandoc-filter-node\n    License for pandoc-filter-node:\n\n    Copyright (c) 2014 Mike Henderson\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n    THE SOFTWARE.\n */\n\nexport type PandocJson = {\n    blocks: Block[];\n    \"pandoc-api-version\": number[];\n    meta: PandocMetaMap;\n};\n\n/** list of key-value attributes */\nexport type AttrList = Array<[string, string]>;\n\n/** [id, classes, list of key-value attributes] */\nexport type Attr = [string, Array<string>, AttrList];\n\nexport type MathType = { t: \"DisplayMath\" | \"InlineMath\" };\nexport type QuoteType = { t: \"SingleQuote\" | \"DoubleQuote\" };\n\n/** [url, title] */\nexport type Target = [string, string];\n/** output file format */\nexport type Format = string;\n\nexport type CitationMode = {\n    t: \"AuthorInText\" | \"SuppressAuthor\" | \"NormalCitation\";\n};\n\nexport type Citation = {\n    citationId: string;\n    citationPrefix: Array<Inline>;\n    citationSuffix: Array<Inline>;\n    citationMode: CitationMode;\n    citationNoteNum: number;\n    citationHash: number;\n};\n\nexport type ListNumberStyle = {\n    t:\n        | \"DefaultStyle\"\n        | \"Example\"\n        | \"Decimal\"\n        | \"LowerRoman\"\n        | \"UpperRoman\"\n        | \"LowerAlpha\"\n        | \"UpperAlpha\";\n};\n\nexport type ListNumberDelim = {\n    t: \"DefaultDelim\" | \"Period\" | \"OneParen\" | \"TwoParens\";\n};\n\nexport type ListAttributes = [number, ListNumberStyle, ListNumberDelim];\n\nexport type Alignment = {\n    t: \"AlignLeft\" | \"AlignRight\" | \"AlignCenter\" | \"AlignDefault\";\n};\n\nexport type ColWidth = {\n    t: \"ColWidth\";\n    c: number;\n};\n\nexport type ColWidthDefault = {\n    t: \"ColWidthDefault\";\n};\n\nexport type Caption = [\n    Array<Inline>, // short\n    Array<Block>, // long\n];\n\nexport type TableCaption = Caption;\n\nexport type FigureCaption = Caption;\n\nexport type TableHead = [Attr, Array<TableRow>];\n\nexport type TableBody = [\n    [\n        Attr,\n        number, // row head columns\n        Array<TableRow>, // intermediate head\n        Array<TableRow>, // body rows\n    ],\n];\n\nexport type TableFoot = [Attr, Array<Block>];\n\nexport type TableRow = [Attr, Array<TableCell>];\n\nexport type TableCell = [\n    Attr,\n    Alignment,\n    number, // row span\n    number, // col span\n    Array<Block>,\n];\n\nexport type MetaElementMap = {\n    // Inline\n    Str: string;\n    Emph: Array<Inline>;\n    Strong: Array<Inline>;\n    Strikeout: Array<Inline>;\n    Superscript: Array<Inline>;\n    Subscript: Array<Inline>;\n    SmallCaps: Array<Inline>;\n    Quoted: [QuoteType, Array<Inline>];\n    Cite: [Array<Citation>, Array<Inline>];\n    Code: [Attr, string];\n    Space: undefined;\n    SoftBreak: undefined;\n    LineBreak: undefined;\n    Math: [MathType, string];\n    RawInline: [Format, string];\n    Link: [Attr, Array<Inline>, Target];\n    Image: [Attr, Array<Inline>, Target];\n    Note: Array<Block>;\n    Span: [Attr, Array<Inline>];\n\n    // Block\n    Plain: Array<Inline>;\n    Para: Array<Inline>;\n    LineBlock: Array<Array<Inline>>;\n    CodeBlock: [Attr, string];\n    RawBlock: [Format, string];\n    BlockQuote: Array<Block>;\n    OrderedList: [ListAttributes, Array<Array<Block>>];\n    BulletList: Array<Array<Block>>;\n    DefinitionList: Array<[Array<Inline>, Array<Array<Block>>]>;\n    Header: [number, Attr, Array<Inline>];\n    HorizontalRule: undefined;\n    Table: [\n        Attr,\n        TableCaption,\n        Array<[Alignment, ColWidth | ColWidthDefault]>,\n        TableHead,\n        TableBody,\n        TableFoot,\n    ];\n    Figure: [Attr, FigureCaption, Array<Block>];\n    Div: [Attr, Array<Block>];\n    Null: undefined;\n};\nexport type MetaElementType = keyof MetaElementMap;\n\nexport type MetaElement<A extends MetaElementType> = { t: A; c: MetaElementMap[A] };\n\nexport type AnyElement = Inline | Block;\n\nexport type Inline =\n    | MetaElement<\"Str\">\n    | MetaElement<\"Emph\">\n    | MetaElement<\"Strong\">\n    | MetaElement<\"Strikeout\">\n    | MetaElement<\"Superscript\">\n    | MetaElement<\"Subscript\">\n    | MetaElement<\"SmallCaps\">\n    | MetaElement<\"Quoted\">\n    | MetaElement<\"Cite\">\n    | MetaElement<\"Code\">\n    | MetaElement<\"Space\">\n    | MetaElement<\"SoftBreak\">\n    | MetaElement<\"LineBreak\">\n    | MetaElement<\"Math\">\n    | MetaElement<\"RawInline\">\n    | MetaElement<\"Link\">\n    | MetaElement<\"Image\">\n    | MetaElement<\"Note\">\n    | MetaElement<\"Span\">;\n\nexport type Block =\n    | MetaElement<\"Plain\">\n    | MetaElement<\"Para\">\n    | MetaElement<\"LineBlock\">\n    | MetaElement<\"CodeBlock\">\n    | MetaElement<\"RawBlock\">\n    | MetaElement<\"BlockQuote\">\n    | MetaElement<\"OrderedList\">\n    | MetaElement<\"BulletList\">\n    | MetaElement<\"DefinitionList\">\n    | MetaElement<\"Header\">\n    | MetaElement<\"HorizontalRule\">\n    | MetaElement<\"Table\">\n    | MetaElement<\"Figure\">\n    | MetaElement<\"Div\">\n    | MetaElement<\"Null\">;\n\n/** meta information about document, mostly from markdown frontmatter\n * https://hackage.haskell.org/package/pandoc-types-1.20/docs/Text-Pandoc-Definition.html#t:MetaValue\n */\nexport type PandocMetaValue =\n    | { t: \"MetaMap\"; c: PandocMetaMap }\n    | { t: \"MetaList\"; c: Array<PandocMetaValue> }\n    | { t: \"MetaBool\"; c: boolean }\n    | { t: \"MetaInlines\"; c: Inline[] }\n    | { t: \"MetaString\"; c: string }\n    | { t: \"MetaBlocks\"; c: Block[] };\nexport type PandocMetaMap = Record<string, PandocMetaValue>;\n\nfunction isElement(x: unknown): x is AnyElement {\n    return (typeof x === \"object\" && x && \"t\" in x) || false;\n}\n\nexport function walkPandocElement(\n    object: any,\n    action: (ele: AnyElement) => void | AnyElement | Array<AnyElement>\n) {\n    if (Array.isArray(object)) {\n        let array: any[] = [];\n\n        for (const element of object) {\n            if (!isElement(element)) {\n                array.push(walkPandocElement(element, action));\n                continue\n            }\n\n            let replacement = action(element)\n\n            if(replacement) {\n                if (Array.isArray(replacement)) {\n                    array.push(...replacement);\n                } else {\n                    array.push(replacement);\n                }\n            } else {\n                array.push(walkPandocElement(element, action));\n            }\n        }\n        return array;\n    }\n\n    if (typeof object === \"object\" && object !== null) {\n        let result: any = {};\n\n        for (const key of Object.getOwnPropertyNames(object)) {\n            if(key === \"__proto__\") continue\n            result[key] = walkPandocElement((object as any)[key], action);\n        }\n\n        return result;\n    }\n\n    return object;\n}\n\nexport function metaElementToSource(value: any) {\n    let result: string[] = []\n\n    walkPandocElement(value, (child) => {\n        if (child.t === \"Str\") result.push(child.c as string)\n        else if (child.t === \"Strong\") result.push(\"__\" + metaElementToSource(child.c) + \"__\")\n        else if (child.t === \"Emph\") result.push(\"_\" + metaElementToSource(child.c) + \"_\")\n        else if (child.t === \"Space\") result.push(\" \")\n        else if (child.t === \"LineBreak\") result.push(\"\\n\")\n        else if (child.t === \"Code\") result.push(\"`\" + child.c[1] + \"`\");\n        else return undefined\n        return child\n    })\n\n    return result.join(\"\")\n}","import * as XML from 'src/xml'\nimport {MetaElement, metaElementToSource, PandocJson, walkPandocElement} from \"src/pandoc/pandoc-json\";\n\nfunction getOpenxmlInjection(xml: string): MetaElement<\"RawBlock\"> {\n    return {\n        t: \"RawBlock\",\n        c: [\"openxml\", xml]\n    }\n}\n\nexport default class PandocJsonPatcher {\n    pandocJson: PandocJson\n\n    constructor(pandocJson: PandocJson) {\n        this.pandocJson = pandocJson\n    }\n\n    replaceDivWithClass(className: string, replacement: (contents: string) => XML.Node) {\n        this.pandocJson.blocks = walkPandocElement(this.pandocJson.blocks, (element) => {\n            if(element.t === \"Div\" && element.c[0][1].indexOf(className) !== -1) {\n                return getOpenxmlInjection(replacement(metaElementToSource(element)).toXmlString())\n            }\n        })\n        return this\n    }\n}","import {metaElementToSource, PandocMetaValue} from \"src/pandoc/pandoc-json\";\n\nexport class PandocJsonMeta {\n    section: PandocMetaValue\n    path: string\n\n    constructor(section: PandocMetaValue, path: string = \"\") {\n        this.section = section\n        this.path = path\n    }\n\n    getSection(path: string) {\n        let any = this.getChild(path)\n        return new PandocJsonMeta(any, this.getAbsPath(path))\n    }\n\n    asArray() {\n        if(this.section === undefined) {\n            this.reportNotExistError(\"\", \"MetaList\")\n        } else if(this.section.t !== \"MetaList\") {\n            this.reportWrongTypeError(\"\", \"MetaList\", this.section.t)\n        } else {\n            return this.section.c.map((element, index) => {\n                return new PandocJsonMeta(element, this.getAbsPath(String(index)))\n            })\n        }\n    }\n\n    getString(path: string = \"\"): string {\n        let child = this.getChild(path)\n        if(!child) {\n            this.reportNotExistError(path, \"MetaInlines\")\n        } else if(child.t !== \"MetaInlines\") {\n            this.reportWrongTypeError(path, \"MetaInlines\", child.t)\n        } else {\n            return metaElementToSource(child.c)\n        }\n    }\n\n    private reportNotExistError(relPath: string, expected: string): never {\n        let absPath = this.getAbsPath(relPath)\n        throw new Error(\"Failed to parse document metadata: expected to have \" + expected + \" at path \" + absPath)\n    }\n\n    private reportWrongTypeError(relPath: string, expected: string, actual: string): never {\n        let absPath = this.getAbsPath(relPath)\n        throw new Error(\"Failed to parse document metadata: expected \" + expected + \" at path \" + absPath + \", got \" +\n            actual + \" instead\")\n    }\n\n    private getAbsPath(relPath: string) {\n        if (this.path.length) {\n            if(relPath.length) {\n                return this.path + \".\" + relPath\n            }\n            return this.path\n        }\n        return relPath\n    }\n\n    getChild(path: string): PandocMetaValue | undefined {\n        if(!path.length) return this.section\n\n        let result = this.section\n\n        for (let component of path.split(\".\")) {\n            // Be safe from prototype pollution\n            if(component === \"__proto__\") return undefined\n            if (!result) return undefined\n\n            if(result.t === \"MetaMap\") {\n                result = result.c[component]\n            }\n\n            if(result.t === \"MetaList\") {\n                let index = Number.parseInt(component)\n                if(!Number.isNaN(index)) {\n                    result = result.c[index]\n                }\n            }\n        }\n        return result\n    }\n}","import * as path from 'path';\nimport * as fs from 'fs';\nimport * as pandoc from \"src/pandoc/pandoc\";\nimport * as XML from \"src/xml\";\nimport * as OXML from \"src/word/oxml\";\nimport * as process from \"process\";\nimport WordDocument from \"src/word/word-document\";\nimport {StyledTemplateSubstitution} from \"src/word-templates/styled-template-substitution\";\nimport InlineTemplateSubstitution from \"src/word-templates/inline-template-substitution\";\nimport ParagraphTemplateSubstitution from \"src/word-templates/paragraph-template-substitution\";\nimport PandocJsonPatcher from \"src/pandoc/pandoc-json-patcher\";\nimport {PandocJsonMeta} from \"src/pandoc/pandoc-json-meta\";\nimport {PandocJson} from \"src/pandoc/pandoc-json\";\n\nconst pandocFlags = [\"--tab-stop=8\"]\nexport const languages = [\"ru\", \"en\"]\nconst resourcesDir = path.dirname(process.argv[1]) + \"/../resources\"\n\nfunction getLinksParagraphs(document: WordDocument, meta: PandocJsonMeta) {\n    let styleId = document.styles.resource.getStyleByName(\"ispLitList\").getId()\n    let numId = \"80\"\n    let links = meta.getSection(\"links\").asArray()\n\n    let result = []\n\n    for (let link of links) {\n        let paragraph = OXML.buildParagraphWithStyle(styleId)\n        let style = paragraph.getChild(\"w:pPr\")\n        style.pushChild(OXML.buildNumPr(\"0\", numId))\n\n        paragraph.pushChild(OXML.buildParagraphTextTag(link.getString()))\n        result.push(paragraph)\n    }\n\n    return result\n}\n\nfunction getAuthors(document: WordDocument, meta: PandocJsonMeta, language: string) {\n    let styleId = document.styles.resource.getStyleByName(\"ispAuthor\").getId()\n    let authors = meta.getSection(\"authors\").asArray()\n\n    let result = []\n    let authorIndex = 1;\n\n    for (let author of authors) {\n        let paragraph = OXML.buildParagraphWithStyle(styleId)\n\n        let name = author.getString(\"name_\" + language)\n        let orcid = author.getString(\"orcid\")\n        let email = author.getString(\"email\")\n\n        let indexLine = String(authorIndex)\n        let authorLine = `${name}, ORCID: ${orcid}, <${email}>`\n\n        paragraph.pushChild(OXML.buildParagraphTextTag(indexLine, [OXML.buildSuperscriptTextStyle()]))\n        paragraph.pushChild(OXML.buildParagraphTextTag(authorLine))\n\n        result.push(paragraph)\n\n        authorIndex++\n    }\n\n    return result\n}\n\nfunction getOrganizations(document: WordDocument, meta: PandocJsonMeta, language: string) {\n    let styleId = document.styles.resource.getStyleByName(\"ispAuthor\").getId()\n    let organizations = meta.getSection(\"organizations_\" + language).asArray()\n\n    let orgIndex = 1\n    let result = []\n\n    for (let organization of organizations) {\n        let paragraph = OXML.buildParagraphWithStyle(styleId)\n\n        let indexLine = String(orgIndex)\n\n        paragraph.pushChild(OXML.buildParagraphTextTag(indexLine, [OXML.buildSuperscriptTextStyle()]))\n        paragraph.pushChild(OXML.buildParagraphTextTag(organization.getString()))\n\n        result.push(paragraph)\n\n        orgIndex++\n    }\n\n    return result\n}\n\nfunction getAuthorsDetail(document: WordDocument, meta: PandocJsonMeta) {\n    let styleId = document.styles.resource.getStyleByName(\"ispText_main\").getId()\n    let authors = meta.getSection(\"authors\").asArray()\n\n    let result = []\n\n    for (let author of authors) {\n        for (let language of languages) {\n            let line = author.getString(\"details_\" + language)\n            let newParagraph = OXML.buildParagraphWithStyle(styleId)\n            newParagraph.getChild(\"w:pPr\").pushChild(\n                XML.Node.build(\"w:spacing\")\n                    .setAttr(\"w:before\", \"30\")\n                    .setAttr(\"w:after\", \"120\")\n            )\n            newParagraph.pushChild(OXML.buildParagraphTextTag(line))\n            result.push(newParagraph)\n        }\n    }\n\n    return result\n}\n\nfunction getImageCaption(document: WordDocument, content: string): XML.Node {\n    // This function is called from patchPandocJson, so this caption is inserted in\n    // the content document, not in the template document.\n    // \"Image Caption\" is a pandoc style that later gets converted to \"ispPicture_sign\"\n\n    let styleId = document.styles.resource.getStyleByName(\"Image Caption\").getId()\n\n    return XML.Node.build(\"w:p\").appendChildren([\n        XML.Node.build(\"w:pPr\").appendChildren([\n            XML.Node.build(\"w:pStyle\").setAttr(\"w:val\", styleId),\n            XML.Node.build(\"w:contextualSpacing\").setAttr(\"w:val\", \"true\"),\n        ]),\n        OXML.buildParagraphTextTag(content)\n    ]);\n}\n\nfunction getListingCaption(document: WordDocument, content: string): XML.Node {\n    // Same note here:\n    // \"Body Text\" is a pandoc style that later gets converted to \"ispText_main\"\n\n    let styleId = document.styles.resource.getStyleByName(\"Body Text\").getId()\n\n    return XML.Node.build(\"w:p\").appendChildren([\n        XML.Node.build(\"w:pPr\").appendChildren([\n            XML.Node.build(\"w:pStyle\").setAttr(\"w:val\", styleId),\n            XML.Node.build(\"w:jc\").setAttr(\"w:val\", \"left\"),\n        ]),\n        OXML.buildParagraphTextTag(content, [\n            XML.Node.build(\"w:i\"),\n            XML.Node.build(\"w:iCs\"),\n            XML.Node.build(\"w:sz\").setAttr(\"w:val\", \"18\"),\n            XML.Node.build(\"w:szCs\").setAttr(\"w:val\", \"18\"),\n        ])\n    ])\n}\n\nfunction patchPandocJson(contentDoc: WordDocument, pandocJson: PandocJson) {\n    new PandocJsonPatcher(pandocJson)\n        .replaceDivWithClass(\"img-caption\", (contents) => getImageCaption(contentDoc, contents))\n        .replaceDivWithClass(\"table-caption\", (contents) => getListingCaption(contentDoc, contents))\n        .replaceDivWithClass(\"listing-caption\", (contents) => getListingCaption(contentDoc, contents))\n}\n\nasync function patchTemplateDocx(templateDoc: WordDocument, contentDoc: WordDocument, pandocJsonMeta: PandocJsonMeta) {\n    await new StyledTemplateSubstitution()\n        .setSource(contentDoc)\n        .setTarget(templateDoc)\n        .setTemplate(\"{{{body}}}\")\n        .setStyleConversion(new Map([\n            [\"Heading 1\", \"ispSubHeader-1 level\"],\n            [\"Heading 2\", \"ispSubHeader-2 level\"],\n            [\"Heading 3\", \"ispSubHeader-3 level\"],\n            [\"Author\", \"ispAuthor\"],\n            [\"Abstract Title\", \"ispAnotation\"],\n            [\"Abstract\", \"ispAnotation\"],\n            [\"Block Text\", \"ispText_main\"],\n            [\"Body Text\", \"ispText_main\"],\n            [\"First Paragraph\", \"ispText_main\"],\n            [\"Normal\", \"Normal\"],\n            [\"Compact\", \"Normal\"],\n            [\"Source Code\", \"ispListing\"],\n            [\"Verbatim Char\", \"ispListing Знак\"],\n            [\"Image Caption\", \"ispPicture_sign\"],\n            [\"Table\", \"Table Grid\"]\n        ]))\n        .setStylesToMigrate(new Set([\n            ...pandoc.tokenClasses\n        ]))\n        .setAllowUnrecognizedStyles(false)\n        .setListConversion({\n            decimal: {\n                styleName: \"ispNumList\",\n                numId: \"33\"\n            },\n            bullet: {\n                styleName: \"ispList1\",\n                numId: \"43\"\n            }\n        })\n        .perform();\n\n    let inlineSubstitution = new InlineTemplateSubstitution().setDocument(templateDoc)\n    let paragraphSubstitution = new ParagraphTemplateSubstitution().setDocument(templateDoc)\n\n    for (let language of languages) {\n        let templates = [\"header\", \"abstract\", \"keywords\", \"for_citation\", \"acknowledgements\"]\n        for (let template of templates) {\n\n            let template_lang = template + \"_\" + language\n            let replacement = pandocJsonMeta.getString(template_lang)\n\n            inlineSubstitution\n                .setTemplate(\"{{{\" + template_lang + \"}}}\")\n                .setReplacement(replacement)\n                .perform()\n        }\n\n        let header = pandocJsonMeta.getString(\"page_header_\" + language)\n\n        if (header === \"@use_citation\") {\n            header = pandocJsonMeta.getString(\"for_citation_\" + language)\n        }\n\n        inlineSubstitution\n            .setTemplate(\"{{{page_header_\" + language + \"}}}\")\n            .setReplacement(header)\n            .perform()\n\n        paragraphSubstitution\n            .setTemplate(\"{{{authors_\" + language + \"}}}\")\n            .setReplacement(() => getAuthors(templateDoc, pandocJsonMeta, language))\n            .perform()\n\n        paragraphSubstitution\n            .setTemplate(\"{{{organizations_\" + language + \"}}}\")\n            .setReplacement(() => getOrganizations(templateDoc, pandocJsonMeta, language))\n            .perform()\n    }\n\n    paragraphSubstitution\n        .setTemplate(\"{{{links}}}\")\n        .setReplacement(() => getLinksParagraphs(templateDoc, pandocJsonMeta))\n        .perform()\n\n    paragraphSubstitution\n        .setTemplate(\"{{{authors_detail}}}\")\n        .setReplacement(() => getAuthorsDetail(templateDoc, pandocJsonMeta))\n        .perform()\n}\n\nasync function main(): Promise<void> {\n    let argv = process.argv\n    if (argv.length < 4) {\n        console.log(\"Usage: main.js <source> <target>\")\n        process.exit(1)\n    }\n\n    let markdownSource = argv[2]\n    let targetPath = argv[3]\n\n    let tmpDocPath = targetPath + \".tmp\"\n    let contentDoc = await new WordDocument().load(tmpDocPath)\n    let markdown = await fs.promises.readFile(markdownSource, \"utf-8\")\n    let pandocJson = await pandoc.markdownToPandocJson(markdown, pandocFlags)\n\n    patchPandocJson(contentDoc, pandocJson)\n\n    await pandoc.pandocJsonToDocx(pandocJson, [\"-o\", tmpDocPath])\n    let pandocJsonMeta = new PandocJsonMeta(pandocJson.meta[\"ispras_templates\"])\n    let templateDoc = await new WordDocument().load(resourcesDir + '/isp-reference.docx')\n\n    await patchTemplateDocx(templateDoc, contentDoc, pandocJsonMeta)\n\n    await templateDoc.save(targetPath)\n}\n\nmain().then()"],"names":["spawn","XMLParser","XMLBuilder","XML.getUsedNames","XML.getNamespace","XML.Node","XML.Serializable","OXML.normalizePath","XML.Wrapper","OXML.getChildVal","OXML.setChildVal","OXML.getProperXmlnsForDocument","OXML.getRelsPath","OXML.fixXmlns","XML.getTextContents","XML.keys","path","process","OXML.buildParagraphWithStyle","OXML.buildNumPr","OXML.buildParagraphTextTag","OXML.buildSuperscriptTextStyle","pandoc.tokenClasses","fs","pandoc.markdownToPandocJson","pandoc.pandocJsonToDocx"],"mappings":"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"}